chemspax.utilities
==================

.. py:module:: chemspax.utilities


Attributes
----------

.. autoapisummary::

   chemspax.utilities.ob_log_handler


Functions
---------

.. autoapisummary::

   chemspax.utilities.distance
   chemspax.utilities.visualize_xyz_file
   chemspax.utilities.find_distance
   chemspax.utilities.remove_last_line
   chemspax.utilities.create_molecule_and_write_xyz
   chemspax.utilities.scale_vector
   chemspax.utilities.get_bonded_atoms
   chemspax.utilities.get_neighbour_bond_distance
   chemspax.utilities.get_neighbour_bond_distance_search
   chemspax.utilities.set_neighbour_bond_distance_search
   chemspax.utilities.convert_list_of_string_to_np_array
   chemspax.utilities.generate_random_rotation_matrix
   chemspax.utilities.read_connectivity_from_mol_file
   chemspax.utilities.convert_xyz_2_mol_file
   chemspax.utilities.convert_mol_2_xyz_file
   chemspax.utilities.print_mol_counts_block
   chemspax.utilities.print_correct_connectivity_line
   chemspax.utilities.ff_optimize
   chemspax.utilities.xyz_2_smiles
   chemspax.utilities.check_overlap
   chemspax.utilities.remove_hydrogens_and_write
   chemspax.utilities.copy_functionalization_list_xyz_2_mol


Module Contents
---------------

.. py:data:: ob_log_handler

.. py:function:: distance(a, b)

.. py:function:: visualize_xyz_file(filename, save_picture=False, manually_generated=True)

   Visualize an .xyz file, number_atoms at top of .xyz needs to be correct!

   :param filename:
   :param save_picture:
   :param manually_generated:
   :return: visualization of .xyz file


.. py:function:: find_distance(filename, index_of_atom_1, index_of_atom_2)

   Find distance between two atoms based on their index in .xyz file

   :param filename:
   :param index_of_atom_1:
   :param index_of_atom_2:
   :return: distance between atoms


.. py:function:: remove_last_line(filename)

.. py:function:: create_molecule_and_write_xyz(input_molecule, filename)

   https://wiki.fysik.dtu.dk/ase/ase/build/build.html?highlight=ase%20build%20molecule#ase.build.molecule
   :param input_molecule:
   :param filename:
   :return:


.. py:function:: scale_vector(starting_point, vector, length)

   Scales a vector with a given length

   :param starting_point:
   :param vector:
   :param length:
   :return: scaled vector


.. py:function:: get_bonded_atoms(source_mol_file, atom_index)

   Use openbabel's methods to find the coordinates of all atoms that are bonded to a given atom

   :param source_mol_file:
   :param atom_index:
   :return: numpy array of atoms bonded to a given atom


.. py:function:: get_neighbour_bond_distance(source_mol_file, atom_index, search_this_atomic_num)

   Use Openbabel's meethods to find the distance of a specific atom type to a given atom, the atoms should be bonded
   and the specific atom type that is searched for should be searched by using it's atomic number.
   This function is useful if the given atom has a known index in the molecule
   if you don't know the index of the central atom use get_neighbour_distance_search.py or
   get_neighbour_bond_distance_search()

   :param source_mol_file:
   :param atom_index:
   :param search_this_atomic_num:
   :return: list of distance between indicated central atom and atoms that are bonded to it with given atomic number


.. py:function:: get_neighbour_bond_distance_search(source_mol_file, central_atom_atomic_num, search_this_atomic_num)

   Use Openbabel's meethods to find the distance of a specific atom type to a given atom type, the atoms should be
   bonded and the specific atom type that is searched for should be searched by using it's atomic number.
   This function is useful if the given atom does not have a known index in the molecule,
   if you know the index of the central atom use get_neighbour_distance.py or get_neighbour_bond_distance()

   :param source_mol_file:
   :param central_atom_atomic_num:
   :param search_this_atomic_num:
   :return: list of distance between a central atom with unknown index and atoms that are bonded to it
   with given atomic number


.. py:function:: set_neighbour_bond_distance_search(source_mol_file, central_atom_atomic_num, search_this_atomic_num, new_length, new_atomic_num)

   Use Openbabel's meethods to scale the distance of a specific atom type to a given atom type, the atoms should be
   bonded and the specific atom type that is searched for should be searched by using it's atomic number.
   For example, if you have a Mn pincer complex where Br is bonded to Mn and you want to replace Br with H
   set_neighbour_bond_distance_search(filename, 25, 35, 1.68, 1)

   :param source_mol_file:
   :param central_atom_atomic_num:
   :param search_this_atomic_num:
   :param new_length
   :param new_atomic_num
   :return: Same xyz or mol file with atom replaced


.. py:function:: convert_list_of_string_to_np_array(array_string)

   Pandas is importing np arrays as strings, use this converter to convert the list of 1 string to a np.array
   https://stackoverflow.com/questions/42755214/how-to-keep-numpy-array-when-saving-pandas-dataframe-to-csv
   :param array_string: example: ['[-0.33332174004836124 0.9428131403470853 0.0]'] dtype=list
   :return: np.array(interpretation_of_array_string)


.. py:function:: generate_random_rotation_matrix()

   https://math.stackexchange.com/questions/442418/random-generation-of-rotation-matrices

   :return: uniformly random rotation matrix


.. py:function:: read_connectivity_from_mol_file(source_file, n_atoms)

   Reads connectivity from a .mol file, each number in .mol file has 3 allocated spaces and the file looks like:
   idx1 idx2 bond_type bond_stereochemistry 0 0 0
   :param source_file:
   :param n_atoms:
   :return: connectivity block from .mol file except 'M  END' line


.. py:function:: convert_xyz_2_mol_file(source_file)

   Converts .xyz to .mol file with the same filename

   :param source_file:
   :return: .mol file with same filename as .xyz file


.. py:function:: convert_mol_2_xyz_file(source_file)

   Converts .mol to .xyz file with the same filename

   :param source_file:
   :return: .xyz file with same filename as .mol file


.. py:function:: print_mol_counts_block(old_string, n_atoms, n_bonds)

   The counts block in a .mol file is corrected based on bonds and atoms given

   :param old_string:
   :param n_atoms:
   :param n_bonds:
   :return: corrected counts block of .mol file


.. py:function:: print_correct_connectivity_line(line)

   A line delimited by 2 spaces is read and correctly formatted to correspond with the official .mol format.
   Each number has 3 allocated spaces, as explained in the docstring of read_connectivity_from_mol_file there are 7
   numbers. This means that the line is formatted as:
   '...''...''...''...''...''...''...' the most right space is allocated to the first number and if the tens are
   reached the middle space is allocated as well, the left space is allocated ones the hundreds are reached.
   So the possibilities are (where \w == a whitespace):
   '\w\w1' '\w10' '100'
   Notice that this function currently only supports indexes that are < 1000.
   :param line:
   :return: correctly formatted line in connectivity block of .mol file


.. py:function:: ff_optimize(source_file, ff_method='uff', list_of_indices_to_freeze=None)

   Uses openbabenl's ff optimization to locally optimize a molecule and write it back to the same file

   :param source_file:
   :param ff_method:
   :param list_of_indices_to_freeze:
   :return: optimized .mol file with the same filename


.. py:function:: xyz_2_smiles(file_name: str) -> str

.. py:function:: check_overlap(dataframe_xyz)

   Given a pandas dataframe, iterates over all the atoms and checks if they're overlapping

   :param dataframe_xyz:
   :return:


.. py:function:: remove_hydrogens_and_write(source_mol_file)

   Use Openbabel's meethods to delete all hydrogens of a molecule and return the same file type with the same
   filename

   :param source_mol_file:
   :return: output file of molecule without hydrogens, same file type as input


.. py:function:: copy_functionalization_list_xyz_2_mol(source_xyz_file, target_mol_file)

   Copy the functionalization list from a xyz file to a mol file

   :param source_xyz_file:
   :param target_mol_file:
   :return:


