chemspax.attach_substituent
===========================

.. py:module:: chemspax.attach_substituent


Attributes
----------

.. autoapisummary::

   chemspax.attach_substituent.folder_name


Classes
-------

.. autoapisummary::

   chemspax.attach_substituent.Substituent
   chemspax.attach_substituent.Complex


Module Contents
---------------

.. py:class:: Substituent(molecule, path_to_substituents, central_atom=0, bond_length=1.2)

   .. py:attribute:: substituents_folder


   .. py:attribute:: extension
      :value: '.xyz'



   .. py:attribute:: molecule


   .. py:attribute:: path


   .. py:attribute:: bond_length


   .. py:attribute:: data_matrix


   .. py:attribute:: central_atom_index


   .. py:attribute:: central_atom


   .. py:method:: scale(vector, central_atom)

      Function used to scale a vector to the given input bond length

      :param vector: vector to be scaled
      :param central_atom: xyz coordinates of central atom
      :return: scaled vector



   .. py:method:: first_coordination()

      Find centroid around a central atom, it is assumed that central atom has 3 bonds
      the atom can be symmetrical or asymmetrical, say: C-X C-Y C-Z and a free electron pair for bonding

      :return: centroid vector of substituent group



   .. py:method:: write_central_atom_and_centroid_to_csv()

      Write the central atom and centroid data of the substituent to the csv database

      :param manually_or_automatically_generated: folder where substituent.xyz should be read from
      :return: new entry to csv database with molecule name, index of central atom, centroid vector for the s
      substituent



.. py:class:: Complex(original_skeleton_name, source_data, substituent_to_be_attached, path_to_database, path_to_skeletons, path_to_substituents)

   .. py:attribute:: skeleton_folder


   .. py:attribute:: extension
      :value: '.xyz'



   .. py:attribute:: original_skeleton_path


   .. py:attribute:: skeleton_path


   .. py:attribute:: substituent_molecule


   .. py:attribute:: substituent_folder


   .. py:attribute:: substituent_path


   .. py:attribute:: substituent_xyz


   .. py:attribute:: database_df


   .. py:attribute:: substituent_central_atom_index


   .. py:attribute:: substituent_centroid_vector


   .. py:attribute:: substituent_central_atom_xyz


   .. py:attribute:: skeleton_atom_to_be_functionalized_xyz


   .. py:attribute:: skeleton_bonded_atom_xyz


   .. py:attribute:: bond_length


   .. py:attribute:: normalized_bond_vector


   .. py:method:: create_functionalization_list_dummy_atom(atomic_nr_of_dummy_atom=1)


   .. py:method:: generate_substituent_group_vector(length_skeleton_bonded_substituent_central=1.84)

      Used to translate and rotate the substituent group for correct placement on the skeleton

      :param length_skeleton_bonded_substituent_central: bond length between the substituent group and skeleton
      :return: xyz matrix with correctly rotated and translated coordinates of substituent group's atoms



   .. py:method:: write_connectivity_in_file(target_path, new_connectivity_data)

      Used to write given connectivity data to a MDL molfile. This necessary to add correct bonding information
      from the input substituent and skeleton file to prevent weird bonds from being formed upon file conversions.
      This assumes that the MDL molfile for substituents and skeletons are correct.

      :param target_path: path to MDL molfile
      :param new_connectivity_data: dataframe of new connectivity data
      :return: same input MDL molfile but now with bonding information from given connectivity data



   .. py:method:: generate_substituent_and_write_xyz(target_filename, path_to_output, length_skeleton_bonded_substituent_central=1.84, use_xtb_script_after=True)

      Used to generate translated and rotated vectors for substituents and attaching them to the skeleton

      :param target_filename: name of target xyz file that will be written
      :param length_skeleton_bonded_substituent_central: bond length between the skeleton and substituent group
      (does not really matter since force field optimization is used after placement of a new substituent)
      :param use_xtb_script_after: REDUNDANT parameter, was used to enable xtb optimization after a functionalization.
      This can still be done by uncommenting last part of this function if desired.
      :return: xyz file of substituent attached to skeleton and FF optimized MDL molfile of substituent attached to
      skeleton



.. py:data:: folder_name
   :value: '../substituents_xyz/automatically_generated/'


