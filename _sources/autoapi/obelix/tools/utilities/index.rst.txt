obelix.tools.utilities
======================

.. py:module:: obelix.tools.utilities


Attributes
----------

.. autoapisummary::

   obelix.tools.utilities.header


Functions
---------

.. autoapisummary::

   obelix.tools.utilities.get_bonded_atoms
   obelix.tools.utilities.calculate_dihedral
   obelix.tools.utilities.calculate_distance
   obelix.tools.utilities.add_code_to_structure
   obelix.tools.utilities.change_second_line_xyz
   obelix.tools.utilities.get_ligands_from_smiles
   obelix.tools.utilities.dataframe_from_dictionary
   obelix.tools.utilities.get_cluster_centroid_coord
   obelix.tools.utilities.find_bonds_with_neighbours
   obelix.tools.utilities.check_if_at_least_two_mapped_atoms_in_ring
   obelix.tools.utilities.find_bidentate
   obelix.tools.utilities.xyz_to_gjf
   obelix.tools.utilities.gjf_to_xyz


Module Contents
---------------

.. py:function:: get_bonded_atoms(xyz_string, atom_index, search_this_atomic_num=None)

   Use openbabel's methods to find the coordinates of all atoms that are bonded to a given atom
   :param XYZ file in string format:
   :param atom_index:
   :return: numpy array of atoms bonded to a given atom


.. py:function:: calculate_dihedral(coordinates_1, coordinates_2, coordinates_3, coordinates_4)

   Praxeolitic formula
   1 sqrt, 1 cross product source: https://stackoverflow.com/a/34245697


.. py:function:: calculate_distance(a, b)

   This function calculates the distance between two points in 3D space.
   :param a: array of floats
   :param b: array of floats

   :returns: float
   :rtype: distance


.. py:function:: add_code_to_structure()

.. py:function:: change_second_line_xyz(xyz, new_content='')

.. py:function:: get_ligands_from_smiles(ligands_SMILES)

.. py:function:: dataframe_from_dictionary(dictionary)

.. py:function:: get_cluster_centroid_coord(n_clusters, unique_labels, dataframe)

   This function identifies the centroids of the clusters generated by the UMAP
   algorithm.

   :param n_clusters: integer
   :param unique_labels: array of integers
   :param dataframe: pandas dataframe containing UMAP1, UMAP2

   :returns:

             array of float sized (2, n_clusters),
                               where 2 is (x, y) coordinates
   :rtype: centroids


.. py:function:: find_bonds_with_neighbours(mol, center_atom_atomic_number)

.. py:function:: check_if_at_least_two_mapped_atoms_in_ring(list_of_mapped_idxs, list_of_ring_idxs)

.. py:function:: find_bidentate(xyz)

.. py:function:: xyz_to_gjf(header, io_path)

.. py:function:: gjf_to_xyz(path, header)

.. py:data:: header

